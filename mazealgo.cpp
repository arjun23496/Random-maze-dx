#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>

int	a[40][40];	// array information about the strucure of the maze 
int posdir[4];	//array storing the possible directions of travel
int noposdir=0;	//variable to store number of possible travel directions
int stackdir=0;

void postraveldir(int x,int y);

int noadjone(void);
int noone(void);




void man()
{
	srand(time(NULL));

	

	for (int i=0;i<40;i++)
	{
		for(int j=0;j<40;j++)
			{
				a[i][j]=0;
				if(i==0||j==0||j==39||i==39)
					a[i][j]=-1;
				if(i==0)
					a[i][j]=j;
				if(j==0)
					a[i][j]=i;
		}
	}



	// Algorithm for the random maze that is to be generated by the computer

	int startposx=2;		//variable to store random x coordinate of the starting position
	int startposy=2;		//variable to store the random y value of the starting position
	int x=0,y=0;

	

	int finaldir;					//variable containing the final direction of travel
	
	//printf("The random position x is %d and y is %d\n",startposx,startposy);

	

	while(noone()<200)
	{
		//while(noadjone()<5)
		{
		startposx=2;
		startposy=2;

		x=startposx;
	y=startposy;

	//initialising all elements with zero

	for (int i=0;i<40;i++)
	{
		for(int j=0;j<40;j++)
			{
				a[i][j]=0;
				if(i==0||j==0||j==39||i==39)
					a[i][j]=-1;
				if(i==0)
					a[i][j]=j;
				if(j==0)
					a[i][j]=i;
		}
	}

	// loop to control the making of the random maze

	for(;noone()<=10000;)
	{
		postraveldir(x,y);

		if(noposdir==0)
			break;
		//printf("\nThe number of possible travel directions are %d\n",noposdir);

		switch(posdir[rand()%noposdir])
		{
		case 1:
			//printf("\nmoving up\n"); 
			if(a[x][y-1]!=1)
			
			a[x][y-1]=-1;	//make wall on one side

			if(a[x][y+1]!=1)
			a[x][y+1]=-1;	//make wall on other side
			
			a[x][y]=1;		//marking the made position
			x--;			//set current position
			break;
		case 2:
			//printf("\nmoving down\n");
			
			if(a[x][y-1]!=1)
			a[x][y-1]=-1;

			if(a[x][y+1]!=1)
			a[x][y+1]=-1;
			
			a[x][y]=1;
			x++;
			break;
		case 3:
			//printf("\nmoving left\n");
			
			if(a[x-1][y]!=1)
			a[x-1][y]=-1;
			
			if(a[x+1][y]!=1)
			a[x+1][y]=-1;
			
			a[x][y]=1;
			y--;
			break;
		case 4:
			//printf("\nmoving right\n");
			
			if(a[x-1][y]!=1)
			a[x-1][y]=-1;

			if(a[x+1][y]!=1)
			a[x+1][y]=-1;
			
			a[x][y]=1;
			y++;
		}
		noposdir=0;
	}
		}
	}

	for (int i=0;i<40;i++)
	{
		for(int j=0;j<40;j++)
			printf("%d\t",a[i][j]);
		printf("\n");
	}
	int dummy;

	printf("The starting position is x: %d and y: %d",startposx,startposy);

	printf("\nThe final position is x: %d and y: %d",x,y);

	printf("\nThe no of ones are: %d\n",noone());

	//printf("\nThe no of adjascent ones are: %d ",noadjone());
	
	scanf("%d",&dummy);

}

void postraveldir(int x,int y)
{
	//printf("\nCalculating possible travel routes...........\n");

	if(a[x-1][y]==0&&a[x-2][y]==0&&stackdir!=1)//check movement up is possible 
	{
		posdir[noposdir]=1;
		noposdir++;
		stackdir=2;
	}
	if(a[x+1][y]==0&&a[x+2][y]==0&&stackdir!=2)//check movement down is possible 
	{
		posdir[noposdir]=2;
		noposdir++;
		stackdir=1;
	}
	if(a[x][y-1]==0&&a[x][y-2]==0&&stackdir!=3)//check movement left is possible
	{
		posdir[noposdir]=3;
		noposdir++;
		stackdir=4;
	}
	if(a[x][y+1]==0&&a[x][y+2]==0&&stackdir!=4)
	{
		posdir[noposdir]=4;
		noposdir++;
		stackdir=3;
	}


	if(noposdir==0)
	{	
		printf("\nNo possible directions found\n");
		if(a[x-1][y]==1&&a[x-2][y]==1&&stackdir!=1)//check movement up is possible 
		{
			posdir[noposdir]=1;
			noposdir++;
			stackdir=2;
		}
		if(a[x+1][y]==1&&a[x+2][y]==1&&stackdir!=2)//check movement down is possible 
		{
			posdir[noposdir]=2;
			noposdir++;
			stackdir=1;
		}
		if(a[x][y-1]==1&&a[x][y-2]==1&&stackdir!=3)//check movement left is possible
		{
			posdir[noposdir]=3;
			noposdir++;
			stackdir=4;
		}
		if(a[x][y+1]==1&&a[x][y+2]==1&&stackdir!=4)	//check movement right is possible
		{
			posdir[noposdir]=4;
			noposdir++;
			stackdir=3;
		}
	}

	
}

int noone()
{
	int no=0;

	for(int i=0;i<40;i++)
	{
		for(int j=0;j<40;j++)
		{
			if(a[i][j]==1)
				no++;
		}
	}
	return no;
}

//int noadjone()
////}
